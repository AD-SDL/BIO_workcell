#!/usr/bin/env python3

from pathlib import Path

from pathlib import Path
from tools.hudson_solo_auxillary.hso_functions import package_hso
from tools.hudson_solo_auxillary import solo_inoculate_from_stock, solo_inoculate_within_plate, solo_inoculate_between_plates
from rpl_wei import Experiment
import time


def main(): 
    # Specify all workflow file paths
    wf_path_new_plate_stack5 = Path(
        "/home/rpl/workspace/BIO_workcell/ale_app/workflows/get_new_plate_stack5.yaml"
    )

    wf_path_new_plate_stack4 = Path(
        "/home/rpl/workspace/BIO_workcell/ale_app/workflows/get_new_plate_stack4.yaml"
    )

    wf_path_inoculate_from_stock = Path(
        "/home/rpl/workspace/BIO_workcell/ale_app/workflows/inoculate_from_stock.yaml"
    )

    wf_path_inoculate_within_plate = Path(
        "/home/rpl/workspace/BIO_workcell/ale_app/workflows/inoculate_within_plate.yaml"
    )

    wf_path_inoculate_between_plates_step1 = Path(
        "/home/rpl/workspace/BIO_workcell/ale_app/workflows/inoculate_between_plates_step1.yaml"
    )

    wf_path_inoculate_between_plates_step2 = Path(
        "/home/rpl/workspace/BIO_workcell/ale_app/workflows/inoculate_between_plates_step2.yaml"
    )

    #Creates a WEI Experiment at the 8000 port and registers the experiment with the title Growth_Curve
    exp = Experiment("127.0.0.1", "8000", "Adaptive_Lab_Evolution_step3")
    exp.register_exp()

    # Important payload variables
    payload = {
        "loop_num": loop_num,
        "inoculant_stock_columns": None,   # populated in loop below when i=0
        "shaker_speed": 30, 
        "plate_id": None,
        "loop_num": None
    }

    # other variables
    loop_num = 0
    incubation_time = 21600  # 6 hours 
    experimental_cycles = 20

    # Main experimental loop
    while loop_num < experimental_cycles: # there are 20 total cycles possible

        payload.loop_num = loop_num  # update the loop number

        if loop_num == 0: # beginning of experiment
            """
            STEPS (for very first inoculations only): 

            1. run get_new_plate_stack5.yaml workflow: 
                PURPOSE: get a new substrate plate from stack 5 and place onto SOLO deck

                1a. transfer plate from Stack 5 to SOLO Position4
                1b. remove lid from plate at SOLO Position4 and place it in Stack 2
            
            2. run inoculate_from_stock.yaml workflow:
                PURPOSE: all steps needed to inoculate one substrate plate from stock, 
                take initial hidex reading, and transfer to incubator

                2a. refill tips at SOLO Position1 (purely a software step)
                2b. refill tips at SOLO Position5 (purely a software step)
                2c. run inoculation SOLO protocol (generated by solo_inoculate_from_stock.py)
                    - transfer from specified inoculant stock columns into columns 1,5, and 9 of substrate plate
                    ('inoculant_stock_columns' is specified below and added to payload)
                2d. open hidex gate
                2e. transfer plate to hidex 
                2f. run hidex OD(590) assay
                2g. open hidex gate
                2h. transfer plate to sealer
                2i. close hidex 
                2j. seal plate
                2k. transfer plate to liconic nest
                2l. load liconic (based on plate_id variable)
                2m. start liconic shaker

            3. run get_new_plate_stack4.yaml workflow:
                PURPOSE: get a new substrate plate from stack 4 and place onto SOLO deck

                3a. transfer plate from Stack 4 to SOLO Position5
                3b. remove lid from plate at SOLO Position5 and place it in Stack 2

            4. repeat step 2 for the second substrate plate that was just retrieved from Stack 4
                - inoculant stock columns and plate_id variables will change for this round
                
            5. Finally, incubate both plates for 6 hours

            """
            # Get new plate from stack 5 -> solo deck pos4, remove lid
            flow_info = exp.run_job(
                wf_path_new_plate_stack5.resolve(), 
                payload=payload, 
                simulate=False
            )  

            # generate necessary SOLO .hso files and update payload
            payload["inoculant_stock_columns"] = [1,2,3] 
            payload.plate_id = "1"
            hso, hso_lines, hso_basename = package_hso(
                solo_inoculate_from_stock.generate_hso_file, 
                payload, 
                "/home/rpl/wei_temp/solo_temp1.hso"
            )

            # add new hso details from above into payload
            payload["hso"] = hso
            payload["hso_lines"] = hso_lines
            payload["hso_basename"] = hso_basename

            # inoculate plate from stack 5, hidex reading, place in incubator
            flow_info = exp.run_job(
                wf_path_inoculate_from_stock.resolve(), 
                payload=payload, 
                simulate=False
            ) 

            # Get new plate from Stack 4
            flow_info = exp.run_job(
                wf_path_new_plate_stack4.resolve(), 
                payload=payload, 
                simulate=False
            )  

            # generate necessary SOLO .hso files and update payload
            payload["inoculant_stock_columns"] = [5,6,7]  # changed for next plate inoculation
            payload.plate_id = "2"
            hso, hso_lines, hso_basename = package_hso(
                solo_inoculate_from_stock.generate_hso_file, 
                payload, 
                "/home/rpl/wei_temp/solo_temp1.hso"
            )

            # add new hso details from above into payload
            payload["hso"] = hso
            payload["hso_lines"] = hso_lines
            payload["hso_basename"] = hso_basename

            # inoculate plate from stack 4, hidex reading, place in incubator
            flow_info = exp.run_job(
                wf_path_inoculate_from_stock.resolve(), 
                payload=payload, 
                simulate=False
            ) 

            # incubate for 6 hours (or 21600 seconds)
            time.sleep(incubation_time)  

            loop_num += 1   # done with this loop

        if loop_num != 0:  # if not the very beginning of the protocol
            if loop_num % 4 == 0:  # inoculation transfer is between plates
                """
                STEPS (for all inoculation transfers between substrate plates): 

                1. run inoculate_between_plates_step1.yaml workflow
                    PURPOSE: complete all steps necessary to collect used substrate plate from incubator, 
                    complete hidex reading, and place onto SOLO deck so that it can be used to inoculate
                    a new substrate plate. 

                    1a. unload plate from incubator (based on plate_id variable)
                    1b. transfer plate to peeler
                    1c. peel plate
                    1d. open hidex gate
                    1e. transfer plate to hidex
                    1f. run hidex OD(590) assay
                    1g. open hidex gate 
                    1h. transfer plate to SOLO Position 6
                    1i. close hidex gate

                2. run get_new_plate_stack5.yaml workflow
                    PURPOSE: Grab a new substrate plate from Stack 5 to inoculate from the used 
                    substrate plate that we collected in step 1. 

                    2a. transfer plate from Stack 5 to SOLO Position4
                    2b. remove lid from plate at SOLO Position4 and place it in Stack 2

                3. run inoculate_between_plates_step2.yaml workflow 
                    PURPOSE: Inoculate new substrate plate from old substrate plate, take hidex reading, 
                    place new substrate plate into incubator and trash old substrate plate.

                    3a. inoculate plate on SOLO Position4 from plate on SOLO Position6
                        OLD PLATE (SOLO Position6) -> NEW PLATE (SOLO Position4)
                            column 4 -> 1
                            column 8 -> 5
                            column 12 -> 9
                    3b. open hidex gate
                    3c. transfer new plate (SOLO Position4) to hidex
                    3d. run hidex OD(590) assay
                    3e. open hidex gate
                    3f. transfer plate to sealer
                    3g. close hidex gate
                    3h. seal plate
                    3i. transfer plate to liconic incubator nest
                    3j. load liconic incubator (based on plate_id variable)
                    3k. start shaking liconic incubator 
                    3l. transfer old plate (SOLO Position6) to Stack 1 (for trash)
                
                4. repeat step 1 for other plate (plate_id = 2 now)

                5. run get_new_plate_stack4.yaml workflow
                    PURPOSE: Grab a new substrate plate from Stack 4 to inoculate from the used 
                    substrate plate that we collected in step 4. 

                    5a. transfer plate from Stack 4 to SOLO Position4
                    5b. remove lid from plate at SOLO Position4 and place it in Stack 2

                6. repeat step 3 for this other plate (plate_id = 2)
                        - at the end of step 6, both new substrate plates are inoculated and in incubator,
                          old substrate plates are in trash stack)

                7. finally, incubate for 6 hours

                NOTE: The inoculation workflow was split into two steps (inoculate_between_plates_step1.yaml
                and inoculate_between_plates_step2.yaml) to reduce the amount of time
                that the new substrate plate sits open on the SOLO deck.

            """
                # First plate ---------------------------------
                payload.plate_id = 1

                # run the inoculate_between_plates_step1.yaml workflow
                flow_info = exp.run_job(
                    wf_path_inoculate_between_plates_step1.resolve(), 
                    payload=payload, 
                    simulate=False
                ) 

                # run get_new_plate_stack5.yaml workflow
                flow_info = exp.run_job(
                    wf_path_new_plate_stack5.resolve(), 
                    payload=payload, 
                    simulate=False
                ) 

                # generate and package SOLO hso files (prep for next step)
                hso, hso_lines, hso_basename = package_hso(
                    solo_inoculate_between_plates.generate_hso_file, 
                    payload, 
                    "/home/rpl/wei_temp/solo_temp1.hso"
                )

                # add new hso details from above into payload (still prep for next step)
                payload["hso"] = hso
                payload["hso_lines"] = hso_lines
                payload["hso_basename"] = hso_basename

                # run inoculate_between_plates_step2.yaml workflow
                flow_info = exp.run_job(
                    wf_path_inoculate_between_plates_step2.resolve(), 
                    payload=payload, 
                    simulate=False
                ) 

                # SECOND PLATE ---------------------------------------------
                payload.plate_id = 2

                # run the inoculate_between_plates_step1.yaml workflow
                flow_info = exp.run_job(
                    wf_path_inoculate_between_plates_step1.resolve(), 
                    payload=payload, 
                    simulate=False
                ) 

                # run get_new_plate_stack4.yaml workflow
                flow_info = exp.run_job(
                    wf_path_new_plate_stack4.resolve(), 
                    payload=payload, 
                    simulate=False
                ) 

                # generate and package SOLO hso files (prep for next step)
                hso, hso_lines, hso_basename = package_hso(
                    solo_inoculate_between_plates.generate_hso_file, 
                    payload, 
                    "/home/rpl/wei_temp/solo_temp1.hso"
                )

                # add new hso details from above into payload (still prep for next step)
                payload["hso"] = hso
                payload["hso_lines"] = hso_lines
                payload["hso_basename"] = hso_basename

                # run inoculate_between_plates_step2.yaml workflow
                flow_info = exp.run_job(
                    wf_path_inoculate_between_plates_step2.resolve(), 
                    payload=payload, 
                    simulate=False
                ) 

                # incubate for 6 hours (or 21600 seconds)
                time.sleep(incubation_time) 

                loop_num += 1
                

            elif loop_num % 4 != 0:  # inoculation transfer is within plate 
                """
                STEPS (for all inoculation transfers within the same plate): 

                1. run inoculate_within_plate.yaml workflow: 
                    PURPOSE: complete all steps necessary to unload correct plate from incubator, 
                    read in hidex, inoculate to next column in the plate, read in hidex again, 
                    then transfer back to incubator

                    1a. unload plate from incubator (based on plate_id variable)
                    1b. transfer plate to peeler
                    1c. peel plate 
                    1d. open hidex gate
                    1e. transfer plate to hidex 
                    1f. run hidex OD(590)reading
                    1g. open hidex gate
                    1h. transfer plate to SOLO Position4
                    1i. close hidex gate
                    1j. inoculate all necessary columns WITHIN THE SAME PLATE using SOLO liquid handler
                        - columns used are based on loop_num % 4
                        - see further details in solo_inoculate_within_plate.py
                    1k. open hidex gate
                    1l. transfer plate to hidex 
                    1m. run hidex OD(590)reading
                    1n. open hidex gate
                    1o. transfer plate to sealer 
                    1p. close hidex gate
                    1q. seal plate
                    1r. transfer to plate liconic nest 
                    1s. load liconic (based on plate_id variable)

                2. Repeat all of step 1 for the second plate (plate_id = 2 now)

                3. Finally, incubate for 6 hours 
                """

                # PLATE 1 ---------------------------------
                payload.plate_id = "1"

                # generate and package SOLO hso files 
                hso, hso_lines, hso_basename = package_hso(
                    solo_inoculate_within_plate.generate_hso_file, 
                    payload, 
                    "/home/rpl/wei_temp/solo_temp1.hso"
                )

                # add new hso details from above into payload
                payload["hso"] = hso
                payload["hso_lines"] = hso_lines
                payload["hso_basename"] = hso_basename

                # Run the within plate inoculation workflow
                flow_info = exp.run_job(
                    wf_path_inoculate_within_plate.resolve(), 
                    payload=payload, 
                    simulate=False
                ) 
                # plate 1 ends in incubator

                # PLATE 2 ------------------------------------ 
                # # TODO: loop this so it's less repetitive?
                payload.plate_id = "2"

                # generate and package SOLO hso files 
                hso, hso_lines, hso_basename = package_hso(
                    solo_inoculate_within_plate.generate_hso_file, 
                    payload, 
                    "/home/rpl/wei_temp/solo_temp1.hso"
                )

                # add new hso details from above into payload
                payload["hso"] = hso
                payload["hso_lines"] = hso_lines
                payload["hso_basename"] = hso_basename

                # Run the within plate inoculation workflow
                flow_info = exp.run_job(
                    wf_path_inoculate_within_plate.resolve(), 
                    payload=payload, 
                    simulate=False
                ) 
                # plate 2 ends in incubator

                # incubate both plates
                time.sleep(incubation_time) 

                loop_num += 1

            else: 
                # something went very wrong


if __name__ == "__main__":
    main()
